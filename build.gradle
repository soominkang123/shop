plugins {
	id 'java'
	id 'org.springframework.boot' version '3.1.2'
	id 'io.spring.dependency-management' version '1.1.2'
	
	// querydsl관련 명령어를 gradle탭에 생성해준다. (권장사항)
	// queryDSL Spring Boot 2.0에서 사용 , Spring Boot 3.0 에서는 사용안함. 
    //id "com.ewerk.gradle.plugins.querydsl" version "1.0.10" 
}

group = 'com.mysite'
version = '0.0.1-SNAPSHOT'

java {
	sourceCompatibility = '17'
}

repositories {
	mavenCentral()
}

dependencies {
// thymeleaf - 라이브러리 2개
	implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
	implementation 'nz.net.ultraq.thymeleaf:thymeleaf-layout-dialect'
	
	// Spring MVC 개발 환경 
	implementation 'org.springframework.boot:spring-boot-starter-web'
	
	// devtools
	developmentOnly 'org.springframework.boot:spring-boot-devtools'
	
	// lombok
	compileOnly 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'
	
	// h2 DataBase 
	runtimeOnly 'com.h2database:h2'
	
	// JUnit Test
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	
	// JPA 
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	
	
	//Spring 에서 제공해주는 유효성 검사 라이브러리 : form에서 빈값이나 글자수 제한 
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    
    //oracle 라이브러리 
	//implementation 'com.oracle.database.jdbc:ojdbc10'
	implementation 'com.oracle.database.jdbc:ojdbc11'
	
	//JDBC
	implementation 'org.springframework.boot:spring-boot-starter-jdbc'
	
	//Spring Security 라이브러리 추가 [2개]
	implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.thymeleaf.extras:thymeleaf-extras-springsecurity6:3.1.1.RELEASE'
	
	//MySQL Driver
	implementation 'com.mysql:mysql-connector-j'
	
	//마크다운 라이브러리 추가 
	implementation 'org.commonmark:commonmark:0.21.0'
	
	//modelmapper 라이브러리   : dto 필드의 값을 Entity 클래스에 매핑  
	implementation group: 'org.modelmapper', name: 'modelmapper', version: '2.3.9'
	
	
	// Querydsl 추가 : spring 3.0 , jdk 17
	implementation 'com.querydsl:querydsl-jpa:5.0.0:jakarta'
	annotationProcessor 'com.querydsl:querydsl-apt:5.0.0:jakarta'
	annotationProcessor "jakarta.annotation:jakarta.annotation-api"
	annotationProcessor "jakarta.persistence:jakarta.persistence-api"
	
	
}

tasks.named('test') {
	useJUnitPlatform()
}


def querydslDir = "$buildDir/generated"

sourceSets {
	main.java.srcDirs += [ querydslDir]
}

tasks.withType(JavaCompile) {
	options.generatedSourceOutputDirectory = file(querydslDir)
}

clean.doLast {
	file(querydslDir).deleteDir()
}






